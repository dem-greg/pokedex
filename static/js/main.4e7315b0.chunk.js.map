{"version":3,"sources":["Components/PokemonList/PokemonCard/PokemonCard.tsx","API/api.ts","Redux/pokedexReducer.ts","Components/PokemonList/Paginator/Paginator.tsx","Components/PokemonList/Paginator/PaginatorContainer.tsx","Components/PokemonList/PokemonSearchForm/PokemonSearchForm.tsx","Components/PokemonList/PokemonSearchForm/PokemonSearchFormContainer.tsx","Components/PokemonList/Filter/FilterCheckbox/FilterCheckbox.tsx","Components/PokemonList/Filter/Filter.tsx","Components/PokemonList/Filter/FilterContainer.tsx","Components/PokemonList/PokemonList.tsx","Components/PokemonList/PokemonListContainer.tsx","App.js","Redux/store.ts","index.js"],"names":["PokemonCard","props","useState","side","setSide","className","type","onClick","hp","max","value","attack","defense","specialAttack","specialDefense","speed","id","src","photo","alt","name","weight","height","instance","axios","create","baseURL","pokemonAPI","count","cardQuantity","get","then","response","initialState","pokemonListData","pokemon","searchHistory","typesData","activeFilter","errorBySearch","isShowPaginator","actions","setPokemon","payload","toggleShowPaginator","toggle","setActiveFilter","delActiveFilter","delFilter","errorSearch","error","setPokemonTypeData","types","setPokemonInfo","info","resetPokemonInfo","setFindPokemon","deleteFindPokemon","requestPokemon","dispatch","a","data","results","getPokemonData","pokedexReducer","state","action","map","x","includes","filter","item","Paginator","viewCards10","viewCards20","viewCards50","viewCards100","onCardQuantity","onMorePokemon","PaginatorContainer","number","setState","pokemonInfo","length","pokemonList","forEach","element","this","React","Component","connect","pokedex","PokemonSearchForm","initialValues","term","onSubmit","values","setSubmitting","toLowerCase","onSearchPokemon","isSubmitting","style","padding","color","disabled","PokemonSearchFormContainer","findPokemon","FilterCheckbox","setCheckType","delCheckType","activeType","setActiveType","checked","onChange","htmlFor","Filter","activeBtn","onShowAllPokemon","onShowPokemon","TypesElement","p","FilterListContainer","getPokemonWithTypes","console","log","el","isActiveBtn","getTypes","alert","PokemonList","onDeleteFindPokemon","sort","b","onMapping","mapName","stats","base_stat","sprites","other","dream_world","front_default","FilterContainer","PokemonListContainer","App","useEffect","document","title","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","StrictMode","getElementById"],"mappings":"uWAmFeA,EA5D4B,SAACC,GACxC,MAAqBC,oBAAS,GAA9B,mBAAIC,EAAJ,KAAUC,EAAV,KAIA,OAAS,sBAAKC,UAAS,oBAAeJ,EAAMK,MAAnC,WACCH,GAAQ,sBAAKI,QAAS,WACxBH,GAASD,IAEPE,UAAS,oBAHD,UAIN,gCACA,wCAAWJ,EAAMO,MACjB,0BAAUC,IAAI,MAAMC,MAAOT,EAAMO,QAEjC,gCACA,4CAAeP,EAAMU,UACrB,0BAAUF,IAAI,MAAMC,MAAOT,EAAMU,YAEjC,gCACA,6CAAgBV,EAAMW,WACtB,0BAAUH,IAAI,MAAMC,MAAOT,EAAMW,aAEjC,gCACA,oDAAuBX,EAAMY,iBAC7B,0BAAUJ,IAAI,MAAMC,MAAOT,EAAMY,mBAEjC,gCACA,qDAAwBZ,EAAMa,kBAC9B,0BAAUL,IAAI,MAAMC,MAAOT,EAAMa,oBAEjC,gCACA,2CAAcb,EAAMc,SACpB,0BAAUN,IAAI,MAAMC,MAAOT,EAAMc,cAKxCZ,GAAS,sBAAKI,QAAS,WACpBH,GAASD,IAEXE,UAAU,aAHF,UAIN,gCACI,sBAAKA,UAAU,aAAf,oBAAoCJ,EAAMe,MAC1C,qBAAKX,UAAU,QAAQY,IAAKhB,EAAMiB,MAAOC,IAAKlB,EAAMmB,UAE5D,sBAAKf,UAAU,OAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBJ,EAAMmB,OAC7B,sBAAKf,UAAU,KAAf,qBAA6BJ,EAAMO,SAEnC,sBAAKH,UAAU,QAAf,UACI,sBAAKA,UAAU,aAAf,cAA8BJ,EAAMoB,OAApC,MAA8C,sBAAMhB,UAAS,kBAAaJ,EAAMK,MAAlC,uBAC9C,sBAAKD,UAAU,yBAAf,cAA0CJ,EAAMK,KAAhD,IAAsD,sBAAMD,UAAS,kBAAaJ,EAAMK,MAAlC,qBACtD,sBAAKD,UAAU,aAAf,UAA6BJ,EAAMqB,OAAnC,KAA4C,sBAAMjB,UAAS,kBAAaJ,EAAMK,MAAlC,iC,+CCvEtDiB,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,+BAICC,EAAa,SACPC,EAAeC,GAC1B,OAAON,EAASO,IAAT,wBAA8BD,EAA9B,mBAAqDD,IACvDG,MAAK,SAAAC,GACF,OAAOA,MAJVL,EAAa,SAOPP,GACX,OAAOG,EAASO,IAAT,kBAAwBV,IAC1BW,MAAK,SAAAC,GACF,OAAOA,MAVVL,EAAa,WAclB,OAAOJ,EAASO,IAAT,QACFC,MAAK,SAAAC,GACF,OAAOA,MAhBVL,EAAa,SAmBVrB,GACR,OAAOiB,EAASO,IAAT,eAAqBxB,IACvByB,MAAK,SAAAC,GACF,OAAOA,MCrBnBC,EAAe,CACfC,gBAAiB,GACjBC,QAAS,GACTC,cAAe,GACfC,UAAW,GACXC,aAAc,GACdC,eAAe,EACfC,iBAAiB,GAqFRC,EAAU,CACnBC,WAAY,SAACP,GAAD,MAAsC,CAAC7B,KAAM,cAAeqC,QAASR,IACjFS,oBAAqB,SAACC,GAAD,MAAsB,CAACvC,KAAM,wBAAyBqC,QAASE,IACpFC,gBAAiB,SAACR,GAAD,MAA2B,CAAChC,KAAM,oBAAqBqC,QAASL,IACjFS,gBAAiB,SAACC,GAAD,MAAwB,CAAC1C,KAAM,oBAAqBqC,QAASK,IAC9EC,YAAa,SAACC,GAAD,MAAqB,CAAC5C,KAAM,eAAgBqC,QAASO,IAClEC,mBAAoB,SAACC,GAAD,MAAqC,CAAC9C,KAAM,wBAAyBqC,QAASS,IAClGC,eAAgB,SAACC,GAAD,MAAwB,CAAChD,KAAM,mBAAoBqC,QAASW,IAC5EC,iBAAkB,iBAAO,CAACjD,KAAM,uBAChCkD,eAAgB,SAACF,GAAD,MAAwB,CAAChD,KAAM,mBAAoBqC,QAASW,IAC5EG,kBAAmB,iBAAO,CAACnD,KAAM,yBAOxBoD,EAAiB,SAAC9B,EAAeC,GAE1C,8CAAO,WAAO8B,GAAP,eAAAC,EAAA,sEAEkBjC,EAA0BC,EAAOC,GAFnD,OAECG,EAFD,OAGH2B,EAASlB,EAAQC,WAAWV,EAAS6B,KAAKC,UAC1CH,EAASlB,EAAQG,qBAAoB,IAJlC,2CAAP,uDAQSmB,EAAiB,SAAC3C,GAE3B,8CAAO,WAAOuC,GAAP,eAAAC,EAAA,sEACkBjC,EAA0BP,GAD5C,OACCY,EADD,OAEH2B,EAASlB,EAAQY,eAAerB,EAAS6B,OAFtC,2CAAP,uDAsCWG,EApJQ,WAAkE,IAAjEC,EAAgE,uDAAxDhC,EAAciC,EAA0C,uCAGpF,OAAQA,EAAO5D,MAGX,IAAK,wBACD,OAAO,2BACA2D,GADP,IAEIzB,gBAAiB0B,EAAOvB,UAGhC,IAAK,cACD,OAAO,2BACAsB,GADP,IAEI/B,gBAAiBgC,EAAOvB,UAIhC,IAAK,wBACD,OAAO,2BACAsB,GADP,IAEI5B,UAAW6B,EAAOvB,UAI1B,IAAK,qBACD,OAAO,2BACAsB,GADP,IAEI9B,QAAS,KAKjB,IAAK,mBACD,OAAK8B,EAAM9B,QAAQgC,KAAI,SAAAC,GAAC,OAAIA,EAAEpD,MAAIqD,SAASH,EAAOvB,QAAQ3B,IAK9CiD,EAJD,2BACAA,GADP,IACc9B,QAAQ,GAAD,mBAAM8B,EAAM9B,SAAZ,CAAqB+B,EAAOvB,YAKzD,IAAK,mBACD,OAAKsB,EAAM7B,cAAc+B,KAAI,SAAAC,GAAC,OAAIA,EAAEpD,MAAIqD,SAASH,EAAOvB,QAAQ3B,IAIpDiD,EAHD,2BACAA,GADP,IACc7B,cAAc,GAAD,mBAAM6B,EAAM7B,eAAZ,CAA2B8B,EAAOvB,YAIrE,IAAK,sBACD,OAAO,2BACAsB,GADP,IACc7B,cAAe,KAIjC,IAAK,eACD,OAAO,2BACA6B,GADP,IACc1B,cAAe2B,EAAOvB,UAGxC,IAAK,oBACD,OAAO,2BACAsB,GADP,IACc3B,aAAa,GAAD,mBAAM2B,EAAM3B,cAAZ,CAA0B,CAAChC,KAAM4D,EAAOvB,aAGtE,IAAK,oBACD,OAAO,2BACAsB,GADP,IACc3B,aAAc2B,EAAM3B,aAAagC,QAAO,SAAAC,GAAI,OAAIA,EAAKjE,OAAS4D,EAAOvB,aAKvF,QACI,OAAOsB,IC1CJO,G,MAvCsB,SAAC,GACuC,IADtC3C,EACqC,EADrCA,aAAa4C,EACwB,EADxBA,YAAYC,EACY,EADZA,YAAYC,EACA,EADAA,YAAYC,EACZ,EADYA,aAC9CC,EAAkC,EAAlCA,eAAeC,EAAmB,EAAnBA,cACrD,OACI,sBAAKzE,UAAW,YAAhB,UACI,sBACKA,UAAYwB,IAAiB4C,EAAe,+BAAmC,kBAChFlE,QAAS,WACLsE,EAAeJ,IAHvB,SAIQA,IACR,sBACIpE,UAAYwB,IAAiB6C,EAAe,+BAAmC,kBAC/EnE,QAAS,WACLsE,EAAeH,IAHvB,SAIQA,IACR,qBAAKrE,UAAW,WAAhB,SACI,yBAAQE,QAAS,WACbuE,EAAcjD,IADlB,UAGI,yBACA,yBACA,yBACA,yBANJ,YAUJ,sBACIxB,UAAYwB,IAAiB8C,EAAe,+BAAmC,kBAC/EpE,QAAS,WACLsE,EAAeF,IAHvB,SAIQA,IACR,sBACKtE,UAAYwB,IAAiB+C,EAAgB,+BAAmC,kBACjFrE,QAAS,WACLsE,EAAeD,IAHvB,SAIQA,SChBdG,E,kDAEF,WAAY9E,GAAa,IAAD,8BACpB,cAAMA,IAWV4E,eAAiB,SAACG,GACd,EAAKC,SAAS,CACVpD,aAAcmD,KAdE,EAkBxBF,cAAgB,SAACjD,GACb,IAAID,EAAQ,EAAK3B,MAAMiF,YAAYC,OACnC,EAAKlF,MAAMyD,eAAe9B,EAAOC,GAAcE,MAAK,WAChD,EAAK9B,MAAMmF,YAAYC,SAAQ,SAAAC,GAAO,OAAI,EAAKrF,MAAM8D,eAAeuB,EAAQlE,aAnBhF,EAAK6C,MAAQ,CACTQ,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,aAAa,IACb/C,aAAc,IAPE,E,0CA4BxB,WACI,OAAO,cAAC,EAAD,2BAAe0D,KAAKtF,OAApB,IAA4ByE,YAAaa,KAAKtB,MAAMS,YAAcC,YAAaY,KAAKtB,MAAMU,YAC/EC,aAAcW,KAAKtB,MAAMW,aACzB/C,aAAc0D,KAAKtB,MAAMpC,aAAc4C,YAAac,KAAKtB,MAAMQ,YAAcK,cAAeS,KAAKT,cAAeD,eAAgBU,KAAKV,sB,GAjC9HW,IAAMC,WAgDxBC,eAXO,SAACzB,GACnB,MAAO,CACHmB,YAAanB,EAAM0B,QAAQzD,gBAC3BgD,YAAajB,EAAM0B,QAAQxD,WAQoE,CACnGuB,iBACAK,kBAFW2B,CAKZX,G,QCxCYa,G,MA/B8B,SAAC3F,GAa1C,OAAO,8BACH,cAAC,IAAD,CAAQ4F,cAAe,CAACC,KAAM,IAAMC,SAXzB,SAACC,EAAD,GAAqG,IAApEC,EAAmE,EAAnEA,cAExC7E,EAAO4E,EAAOF,KAAKI,cAEnBjG,EAAMkG,gBAAgB/E,GACtB6E,GAAc,IAMlB,SACK,gBAAEG,EAAF,EAAEA,aAAF,OACG,eAAC,IAAD,WACKnG,EAAMsC,eAAgB,qBAAK8D,MAAO,CAAEC,QAAS,YAAaC,MAAO,OAA3C,kCACvB,cAAC,IAAD,CAAOlG,UAAWJ,EAAMsC,cAAiB,aAAc,KAAMjC,KAAK,OAC3Dc,KAAK,SACZ,wBAAQf,UAAW,WAAYC,KAAK,SAASkG,SAAUJ,EAAvD,4BCpBdK,E,4MAGFN,gBAAkB,SAAC/E,GACH,KAATA,GACH,EAAKnB,MAAMyG,YAAYtF,I,4CAM3B,WAEI,OACI,8BACI,cAAC,EAAD,2BAAuBmE,KAAKtF,OAA5B,IAAmCkG,gBAAiBZ,KAAKY,yB,GAfhCX,IAAMC,WA+BhCC,eATO,SAACzB,GACnB,MAAO,CACH1B,cAAe0B,EAAM0B,QAAQpD,iBAOkE,CAACmE,YJ6F7E,SAACtF,GAExB,8CAAO,WAAOuC,GAAP,eAAAC,EAAA,+EAEsBjC,EAA0BP,GAFhD,OAEKY,EAFL,OAIC2B,EAASlB,EAAQe,eAAexB,EAAS6B,OACzCF,EAASlB,EAAQQ,aAAY,IAL9B,gDAOCU,EAASlB,EAAQQ,aAAY,IAP9B,yDAAP,wDI/FWyC,CACZe,G,QCRYE,G,YAxB2B,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,aAAczF,EAAU,EAAVA,KAEpE,EAAkClB,oBAAkB,GAApD,mBAAK4G,EAAL,KAAiBC,EAAjB,KAGA,OAGI,sBAAK1G,UAAU,oBAAf,UACI,uBAAOC,KAAK,WAAWU,GAAI,MAAMI,EAAMf,UAAU,eAAe2G,QAASF,EAAYG,SAAU,WAC3FF,GAAeD,GACVA,EAECD,EAAazF,GADfwF,EAAaxF,MAKrB,uBAAQ8F,QAAS,MAAM9F,EAAvB,SAA8BA,SCmB3B+F,EAjCmB,SAAC,GAGO,IAFHC,EAEE,EAFFA,UAAW/E,EAET,EAFSA,UAAWuE,EAEpB,EAFoBA,aAAcC,EAElC,EAFkCA,aACpCQ,EACE,EADFA,iBAAkBC,EAChB,EADgBA,cAAehF,EAC/B,EAD+BA,aAGhEiF,EAAelF,EAAU8B,KAAI,SAAAqD,GAAC,OAAI,cAAC,EAAD,CACgBpG,KAAMoG,EAAEpG,KACRwF,aAAcA,EACdC,aAAcA,GAHTW,EAAEpG,SAM7D,OAAQ,gCACA,qBAAKf,UAAU,cAAf,SACKkH,IAGL,sBAAKlH,UAAU,mBAAf,UACK+G,GAAa,wBAAQ/G,UAAW,gBAAiBE,QAAS,WACvD8G,KADU,uBAMd,wBAAQhH,UAAU,gBAAgBmG,SAAkC,IAAxBlE,EAAa6C,OAAc5E,QAAS,WAC5E+G,KADJ,yBCDVG,E,kDAEF,WAAYxH,GAAa,IAAD,8BACpB,cAAMA,IAUTqH,cAXuB,sBAWP,sCAAA1D,EAAA,sDACZ,EAAK3D,MAAMsD,mBADC,cAGS,EAAKtD,MAAMqC,cAHpB,gEAGFgD,EAHE,iBAKF,EAAKrF,MAAMyH,oBAAoBpC,EAAQhF,MALrC,OAMRqH,QAAQC,IAAI,UANJ,cAOQ,EAAK3H,MAAMmF,aAPnB,kEAOEyC,EAPF,kBAQE,EAAK5H,MAAM8D,eAAe8D,EAAG1F,QAAQf,MARvC,wRAWZ,EAAK0G,cAXO,8EAXO,EAyBxBA,YAAc,WACV,EAAK7C,SAAS,CACZmC,WAAY,EAAKnD,MAAMmD,aA3BL,EAgCvBC,iBAhCuB,sBAgCJ,gCAAAzD,EAAA,6DAEf,EAAK3D,MAAMsD,mBAFI,SAGL,EAAKtD,MAAMyD,eAAe,EAAG,IAHxB,qBAKK,EAAKzD,MAAMmF,aALhB,gEAKDyC,EALC,kBAMD,EAAK5H,MAAM8D,eAAe8D,EAAGzG,MAN5B,+IAQf,EAAK0G,cARU,gEAhCI,EA4CxBlB,aAAe,SAACxF,GAEZ,EAAKnB,MAAM6C,gBAAgB1B,IA9CP,EAgDxByF,aAAe,SAACzF,GAEZ,EAAKnB,MAAM8C,gBAAgB3B,IAhD3B,EAAK6C,MAAQ,CACVmD,WAAU,GAHO,E,qDAMxB,WACI7B,KAAKtF,MAAM8H,a,oBA+Cf,WACI,OAAO,cAAC,EAAD,2BAAYxC,KAAKtF,OAAjB,IAAyBmH,UAAW7B,KAAKtB,MAAMmD,UAAYC,iBAAkB9B,KAAK8B,iBAAkBC,cAAe/B,KAAK+B,cAChHV,aAAcrB,KAAKqB,aAAcC,aAActB,KAAKsB,oB,GA1DzCrB,IAAMC,WAyEzBC,eAXO,SAACzB,GACnB,MAAO,CACH5B,UAAW4B,EAAM0B,QAAQtD,UACzB+C,YAAanB,EAAM0B,QAAQzD,gBAC3BI,aAAc2B,EAAM0B,QAAQrD,gBAOmE,CACnGyF,SPsCoB,WACpB,8CAAO,WAAOpE,GAAP,eAAAC,EAAA,sEACkBjC,IADlB,OACCK,EADD,OAEH2B,EAASlB,EAAQU,mBAAmBnB,EAAS6B,KAAKC,UAF/C,2CAAP,uDOtCA4D,oBP4CgC,SAACpH,GACjC,8CAAO,WAAOqD,GAAP,eAAAC,EAAA,sEACkBjC,EAAuBrB,GADzC,OACC0B,EADD,OAEH2B,EAASlB,EAAQC,WAAWV,EAAS6B,KAAK1B,UAC1CwB,EAASlB,EAAQG,qBAAoB,IACA,IAAjCZ,EAAS6B,KAAK1B,QAAQgD,QACtB6C,MAAM,wBAA0BhG,EAAS6B,KAAKzC,MAL/C,2CAAP,uDO5CAsC,iBACAK,iBACAjB,gBAAiBL,EAAQK,gBACzBC,gBAAiBN,EAAQM,gBACzBQ,iBAAkBd,EAAQc,kBAPfmC,CASZ+B,GC3DYQ,EA7CwB,SAAC,GAAuE,IAAtE/C,EAAqE,EAArEA,YAAY1C,EAAyD,EAAzDA,gBAAiBJ,EAAwC,EAAxCA,cAAgB8F,EAAwB,EAAxBA,oBAElFhD,EAAYiD,MAAK,SAAUvE,EAAGwE,GAC1B,OAAOxE,EAAE5C,GAAKoH,EAAEpH,MAGpB,IAAIqH,EAAY,SAACC,GACb,OAAOA,EAAQnE,KAAI,SAAAqD,GAAC,OAAI,cAAC,EAAD,CAAwBxG,GAAIwG,EAAExG,GAAIR,GAAIgH,EAAEe,MAAM,GAAGC,UACpClH,OAAQkG,EAAElG,OAAQD,OAAQmG,EAAEnG,OAC5Bf,KAAMkH,EAAEpE,MAAM,GAAG9C,KAAKc,KACtBA,KAAMoG,EAAEpG,KACRF,MAAoD,MAA7CsG,EAAEiB,QAAQC,MAAMC,YAAYC,cAAwBpB,EAAEiB,QAAQG,cAAgBpB,EAAEiB,QAAQC,MAAMC,YAAYC,cACjHjI,OAAQ6G,EAAEe,MAAM,GAAGC,UAAW5H,QAAS4G,EAAEe,MAAM,GAAGC,UAClD3H,cAAe2G,EAAEe,MAAM,GAAGC,UAC1B1H,eAAgB0G,EAAEe,MAAM,GAAGC,UAC3BzH,MAAOyG,EAAEe,MAAM,GAAGC,WARbhB,EAAExG,QAahD,OAAQ,gCACA,cAAC,EAAD,IACA,cAAC6H,EAAD,IACCzG,EAAc+C,OAAS,GAAK,sBAAK9E,UAAU,eAAf,UACzB,gDACA,qBAAKA,UAAU,YAAf,SACKgI,EAAUjG,KAEf,wBAAQ/B,UAAW,0BAA2BE,QAAS,WACnD2H,KADJ,uBAMJ,qBAAK7H,UAAU,YAAf,SACKgI,EAAUnD,KAEd1C,GAAmB,cAAC,EAAD,QCxB1BsG,E,4MAQFZ,oBAAsB,WAClB,EAAKjI,MAAMwD,oBACX,EAAKxD,MAAMgD,aAAY,I,uDAT3B,WAAqB,IAAD,OAChBsC,KAAKtF,MAAMyD,eAAe,EAAG,IAAI3B,MAAK,WAClC,EAAK9B,MAAMmF,YAAYC,SAAQ,SAAAC,GAAO,OAAI,EAAKrF,MAAM8D,eAAeuB,EAAQlE,c,oBAWpF,WAEI,OAEI,8BACI,cAAC,EAAD,2BAAiBmE,KAAKtF,OAAtB,IAA6BiI,oBAAqB3C,KAAK2C,6B,GAnBpC1C,IAAMC,WAoC1BC,eAVO,SAACzB,GACnB,MAAO,CACHiB,YAAajB,EAAM0B,QAAQxD,QAC3BiD,YAAanB,EAAM0B,QAAQzD,gBAC3BE,cAAe6B,EAAM0B,QAAQvD,cAC7BI,gBAAiByB,EAAM0B,QAAQnD,mBAKgE,CACnGkB,iBACAK,iBACAN,kBAAmBhB,EAAQgB,kBAC3BR,YAAaR,EAAQQ,aAJVyC,CAKZoD,GCtDYC,MAZf,WAIE,OAHAC,qBAAU,WACRC,SAASC,MAAQ,YAChB,IAEH,8BAEE,cAAC,EAAD,O,gBCRAC,EAAcC,YAAgB,CAC9BzD,QAAS3B,IAkBPqF,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAQC,YAAYP,EAAmCE,EACzDM,YAAgBC,OAKpBN,OAAOO,UAAYJ,EAEJA,QCxBfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACF,cAAC,EAAD,QAGFR,SAASgB,eAAe,W","file":"static/js/main.4e7315b0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport  \"./PokemonCard.css\"\r\nimport \"../../../assets/images/search.svg\"\r\n\r\n\r\ntype PropsType = {\r\n    type: string\r\n\r\n    hp: number\r\n    attack: number\r\n    defense:number\r\n    specialAttack:number\r\n    specialDefense:number\r\n    speed: number\r\n    id:number\r\n    name:string\r\n    weight:number\r\n    height:number\r\n    photo:string\r\n\r\n}\r\n\r\n\r\n    let PokemonCard: React.FC<PropsType> = (props)=> {\r\n    let[side, setSide] = useState(true);\r\n\r\n\r\n\r\n    return ( <div className={`card card_${props.type}`}>\r\n            {!side && <div onClick={()=>{\r\n            setSide(!side)\r\n            }\r\n            } className={`backside sideTrue`}>\r\n                <div>\r\n                <label>HP:{props.hp}</label>\r\n                <progress max=\"100\" value={props.hp}/>\r\n                </div>\r\n                <div>\r\n                <label>Attack:{props.attack}</label>\r\n                <progress max=\"100\" value={props.attack}/>\r\n                </div>\r\n                <div>\r\n                <label>Defense:{props.defense}</label>\r\n                <progress max=\"100\" value={props.defense}/>\r\n                </div>\r\n                <div>\r\n                <label>Special Attack:{props.specialAttack}</label>\r\n                <progress max=\"100\" value={props.specialAttack}/>\r\n                </div>\r\n                <div>\r\n                <label>Special Defense:{props.specialDefense}</label>\r\n                <progress max=\"100\" value={props.specialDefense}/>\r\n                </div>\r\n                <div>\r\n                <label>Speed:{props.speed}</label>\r\n                <progress max=\"100\" value={props.speed}/>\r\n                </div>\r\n\r\n            </div>\r\n            }\r\n        {side &&  <div onClick={()=>{\r\n            setSide(!side)\r\n        }\r\n        } className=\"front_side\">\r\n            <div>\r\n                <div className=\"pokemon_id\">index: {props.id}</div>\r\n                <img className=\"photo\" src={props.photo} alt={props.name}/>\r\n            </div>\r\n        <div className=\"main\">\r\n            <div className=\"name\">{props.name}</div>\r\n            <div className=\"hp\">HEALTH: {props.hp}</div>\r\n        </div>\r\n            <div className=\"stats\">\r\n                <div className=\"stats_item\"> {props.weight} kg<span className={`tag tag_${props.type}`}>Weight</span></div>\r\n                <div className=\"stats_item center_item\"> {props.type} <span className={`tag tag_${props.type}`}>Type</span></div>\r\n                <div className=\"stats_item\">{props.height} m<span className={`tag tag_${props.type}`}>Height</span></div>\r\n            </div>\r\n            </div>\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import  axios from \"axios\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://pokeapi.co/api/v2/'\r\n\r\n})\r\n\r\nexport const pokemonAPI = {\r\n    getPokemonList(count: number, cardQuantity: number) {\r\n        return instance.get(`pokemon?limit=${cardQuantity}&offset=${count}`)\r\n            .then(response => {\r\n                return response\r\n            });\r\n    },\r\n    getPokemonData(name: string) {\r\n        return instance.get(`pokemon/${name}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    getTypes() {\r\n        return instance.get(`type`)\r\n            .then(response => {\r\n                return response\r\n            });\r\n    },\r\n    pokemonType(type: string) {\r\n        return instance.get(`type/${type}`)\r\n            .then(response => {\r\n                return response\r\n            });\r\n    },\r\n\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {pokemonAPI} from \"../API/api\";\r\nimport {pokemonListType, pokemonType} from \"../Types/Type\";\r\nimport {AppStateType, InferActionsType} from \"./store\";\r\n\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    pokemonListData: [] as Array<pokemonListType>,\r\n    pokemon: [] as Array<pokemonType>,\r\n    searchHistory: [] as Array<pokemonType>,\r\n    typesData: [] as Array<{ name: string }>,\r\n    activeFilter: [] as Array<{ type: string }>,\r\n    errorBySearch: false as boolean,\r\n    isShowPaginator: true as boolean\r\n\r\n}\r\n\r\nconst pokedexReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case \"TOGGLE_SHOW_PAGINATOR\": {\r\n            return {\r\n                ...state,\r\n                isShowPaginator: action.payload\r\n            }\r\n        }\r\n        case \"SET_POKEMON\": {\r\n            return {\r\n                ...state,\r\n                pokemonListData: action.payload\r\n            }\r\n        }\r\n\r\n        case \"SET_POKEMON_TYPE_DATA\": {\r\n            return {\r\n                ...state,\r\n                typesData: action.payload\r\n\r\n            }\r\n        }\r\n        case \"RESET_POKEMON_INFO\": {\r\n            return {\r\n                ...state,\r\n                pokemon: [],\r\n\r\n\r\n            }\r\n        }\r\n        case \"SET_POKEMON_INFO\": {\r\n            if (!state.pokemon.map(x => x.id).includes(action.payload.id))\r\n                return {\r\n                    ...state, pokemon: [...state.pokemon, action.payload],\r\n\r\n                }\r\n            else return state;\r\n        }\r\n        case \"SET_FIND_POKEMON\": {\r\n            if (!state.searchHistory.map(x => x.id).includes(action.payload.id))\r\n                return {\r\n                    ...state, searchHistory: [...state.searchHistory, action.payload],\r\n                }\r\n            else return state;\r\n        }\r\n        case \"DELETE_FIND_POKEMON\": {\r\n            return {\r\n                ...state, searchHistory: [],\r\n            }\r\n        }\r\n\r\n        case \"ERROR_SEARCH\": {\r\n            return {\r\n                ...state, errorBySearch: action.payload\r\n            }\r\n        }\r\n        case \"SET_ACTIVE_FILTER\": {\r\n            return {\r\n                ...state, activeFilter: [...state.activeFilter, {type: action.payload}]\r\n            }\r\n        }\r\n        case \"DEL_ACTIVE_FILTER\": {\r\n            return {\r\n                ...state, activeFilter: state.activeFilter.filter(item => item.type !== action.payload),\r\n\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const actions = {\r\n    setPokemon: (pokemon: Array<pokemonListType>) => ({type: \"SET_POKEMON\", payload: pokemon} as const),\r\n    toggleShowPaginator: (toggle: boolean) => ({type: \"TOGGLE_SHOW_PAGINATOR\", payload: toggle} as const),\r\n    setActiveFilter: (activeFilter: string) => ({type: \"SET_ACTIVE_FILTER\", payload: activeFilter} as const),\r\n    delActiveFilter: (delFilter: string) => ({type: \"DEL_ACTIVE_FILTER\", payload: delFilter} as const),\r\n    errorSearch: (error: boolean) => ({type: \"ERROR_SEARCH\", payload: error} as const),\r\n    setPokemonTypeData: (types: Array<{ name: string }>) => ({type: \"SET_POKEMON_TYPE_DATA\", payload: types} as const),\r\n    setPokemonInfo: (info: pokemonType) => ({type: \"SET_POKEMON_INFO\", payload: info} as const),\r\n    resetPokemonInfo: () => ({type: \"RESET_POKEMON_INFO\"} as const),\r\n    setFindPokemon: (info: pokemonType) => ({type: \"SET_FIND_POKEMON\", payload: info} as const),\r\n    deleteFindPokemon: () => ({type: \"DELETE_FIND_POKEMON\"} as const),\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const requestPokemon = (count: number, cardQuantity: number | any): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        let response = await pokemonAPI.getPokemonList(count, cardQuantity)\r\n        dispatch(actions.setPokemon(response.data.results));\r\n        dispatch(actions.toggleShowPaginator(true))\r\n\r\n    }\r\n}\r\nexport const getPokemonData = (name: string): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await pokemonAPI.getPokemonData(name)\r\n        dispatch(actions.setPokemonInfo(response.data));\r\n    }\r\n}\r\n\r\nexport const findPokemon = (name: string): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n        try {\r\n            let response = await pokemonAPI.getPokemonData(name)\r\n\r\n            dispatch(actions.setFindPokemon(response.data))\r\n            dispatch(actions.errorSearch(false))\r\n        } catch (e) {\r\n            dispatch(actions.errorSearch(true))\r\n        }\r\n    }\r\n}\r\nexport const getTypes = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await pokemonAPI.getTypes()\r\n        dispatch(actions.setPokemonTypeData(response.data.results));\r\n\r\n    }\r\n}\r\nexport const  getPokemonWithTypes = (type: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await pokemonAPI.pokemonType(type)\r\n        dispatch(actions.setPokemon(response.data.pokemon))\r\n        dispatch(actions.toggleShowPaginator(false))\r\n        if (response.data.pokemon.length === 0) {\r\n            alert(\"no pokemon with type \" + response.data.name)\r\n        }\r\n    }\r\n\r\n\r\n}\r\nexport default pokedexReducer;\r\n\r\n","import React from 'react';\r\nimport './Paginator.css';\r\n\r\ntype PropsType = {\r\n     cardQuantity: number,\r\n     viewCards10: number,\r\n     viewCards20: number,\r\n     viewCards50: number,\r\n     viewCards100: number,\r\n    onCardQuantity: (count:number)=> void,\r\n    onMorePokemon: (count:number)=> void\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({cardQuantity,viewCards10,viewCards20,viewCards50,viewCards100,\r\n                                          onCardQuantity,onMorePokemon}) => {\r\n    return (\r\n        <div className={\"paginator\"}>\r\n            <span\r\n                 className={(cardQuantity === viewCards10 && \"active_value paginator_value\") || \"paginator_value\"}\r\n                onClick={() => {\r\n                    onCardQuantity(viewCards10)\r\n                }}>{viewCards10}</span>\r\n            <span\r\n                className={(cardQuantity === viewCards20 && \"active_value paginator_value\") || \"paginator_value\"}\r\n                onClick={() => {\r\n                    onCardQuantity(viewCards20)\r\n                }}>{viewCards20}</span>\r\n            <div className={\"btn_more\"}>\r\n                <button onClick={() => {\r\n                    onMorePokemon(cardQuantity)\r\n                }}>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    More\r\n                </button>\r\n            </div>\r\n            <span\r\n                className={(cardQuantity === viewCards50 && \"active_value paginator_value\") || \"paginator_value\"}\r\n                onClick={() => {\r\n                    onCardQuantity(viewCards50)\r\n                }}>{viewCards50}</span>\r\n            <span\r\n                 className={(cardQuantity === viewCards100 && \"active_value paginator_value\") || \"paginator_value\"}\r\n                onClick={() => {\r\n                    onCardQuantity(viewCards100)\r\n                }}>{viewCards100}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n     getPokemonData, requestPokemon,\r\n} from \"../../../Redux/pokedexReducer\";\r\nimport { AppStateType } from \"../../../Redux/store\";\r\nimport {pokemonListType, pokemonType } from \"../../../Types/Type\";\r\nimport Paginator from \"./Paginator\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    pokemonInfo: Array<pokemonType>\r\n    pokemonList: Array<pokemonListType>\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    requestPokemon:  (count: number, cardQuantity: number) => any\r\n    getPokemonData: (name: string)=> void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype StateType = {\r\n    cardQuantity: number,\r\n    viewCards10: number,\r\n    viewCards20: number,\r\n    viewCards50: number,\r\n    viewCards100: number,\r\n}\r\n\r\nclass PaginatorContainer extends React.Component<PropsType, StateType> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            viewCards10: 10,\r\n            viewCards20: 20,\r\n            viewCards50: 50,\r\n            viewCards100:100,\r\n            cardQuantity: 20 };\r\n    }\r\n\r\n\r\n\r\n    onCardQuantity = (number: number) => {\r\n        this.setState({\r\n            cardQuantity: number\r\n        });\r\n    }\r\n\r\n    onMorePokemon = (cardQuantity:number) => {\r\n        let count = this.props.pokemonInfo.length\r\n        this.props.requestPokemon(count, cardQuantity).then(() => {\r\n            this.props.pokemonList.forEach(element => this.props.getPokemonData(element.name))\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return <Paginator {...this.props}  viewCards20={this.state.viewCards20}  viewCards50={this.state.viewCards50}\r\n                          viewCards100={this.state.viewCards100}\r\n                          cardQuantity={this.state.cardQuantity} viewCards10={this.state.viewCards10}  onMorePokemon={this.onMorePokemon} onCardQuantity={this.onCardQuantity}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        pokemonList: state.pokedex.pokemonListData,\r\n        pokemonInfo: state.pokedex.pokemon,\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    requestPokemon,\r\n    getPokemonData,\r\n\r\n\r\n})(PaginatorContainer);\r\n\r\n\r\n\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport './PokemonSearchForm.css';\r\ntype PropsType= {\r\n    errorBySearch:boolean\r\n    onSearchPokemon:(name: string)=> void\r\n}\r\n\r\ntype PokemonSearchFormType={\r\n    term: string\r\n}\r\n\r\n\r\nlet PokemonSearchForm: React.FC<PropsType> = (props)=> {\r\n\r\n\r\n    const submit = (values: PokemonSearchFormType, {setSubmitting}: {setSubmitting: (isSubmitting:boolean)=> void}) => {\r\n\r\n        let name = values.term.toLowerCase()\r\n\r\n            props.onSearchPokemon(name)\r\n            setSubmitting(false);\r\n\r\n\r\n    }\r\n\r\n    return <div>\r\n        <Formik initialValues={{term: ''}}  onSubmit={submit}>\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    {props.errorBySearch&& <div style={{ padding: \"15px 10px\", color: \"red\"}}>Pokemon is not found</div>}\r\n                    <Field className={props.errorBySearch  ? \"error_name\": null} type=\"text\"\r\n                           name=\"term\"  />\r\n                    <button className={\"btn_find\"} type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default PokemonSearchForm","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport PokemonSearchForm from \"./PokemonSearchForm\";\r\nimport {findPokemon} from \"../../../Redux/pokedexReducer\";\r\nimport { AppStateType } from \"../../../Redux/store\";\r\ntype MapStateToPropsType = {\r\n    errorBySearch: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    findPokemon: (name: string)=> void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass PokemonSearchFormContainer extends React.Component<PropsType> {\r\n\r\n\r\n    onSearchPokemon = (name:string) => {\r\n        if(name !== \"\")\r\n        this.props.findPokemon(name)\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <PokemonSearchForm {...this.props} onSearchPokemon={this.onSearchPokemon}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        errorBySearch: state.pokedex.errorBySearch,\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {findPokemon\r\n})(PokemonSearchFormContainer);\r\n","import React, {useState} from 'react';\r\nimport \"./FilterCheckbox.css\"\r\n\r\n\r\ntype PropsType = {\r\n    setCheckType: (name: string)=> void\r\n    delCheckType: (name: string)=> void\r\n    name: string\r\n}\r\n\r\n\r\n\r\n\r\nlet FilterCheckbox: React.FC<PropsType> = ({setCheckType, delCheckType, name })=> {\r\n\r\n    let [activeType, setActiveType] = useState<boolean>(false);\r\n\r\n\r\n    return (\r\n\r\n\r\n        <div className=\"checkboxContainer\">\r\n            <input type=\"checkbox\" id={\"cb-\"+name} className=\"checkboxType\" checked={activeType} onChange={() => {\r\n                setActiveType(!activeType)\r\n                if (!activeType) {\r\n                    setCheckType(name)\r\n                }else delCheckType(name)\r\n\r\n            }\r\n            }/>\r\n            <label  htmlFor={\"cb-\"+name}>{name}</label>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default FilterCheckbox;","import React from 'react';\r\nimport \"./Filter.css\"\r\nimport FilterCheckbox from \"./FilterCheckbox/FilterCheckbox\";\r\n\r\n\r\ntype PropsType = {\r\n    typesData: Array<{ name: string }>\r\n    setCheckType: (name: string) => void\r\n    delCheckType: (name: string) => void\r\n    onShowAllPokemon: () => any\r\n    onShowPokemon: () => any\r\n    activeFilter: Array<{ type: string }>\r\n    activeBtn: boolean\r\n}\r\n\r\n\r\nlet Filter: React.FC<PropsType> = ({\r\n                                       activeBtn, typesData, setCheckType, delCheckType,\r\n                                       onShowAllPokemon, onShowPokemon, activeFilter\r\n                                   }) => {\r\n\r\n    let TypesElement = typesData.map(p => <FilterCheckbox key={p.name}\r\n                                                          name={p.name}\r\n                                                          setCheckType={setCheckType}\r\n                                                          delCheckType={delCheckType}/>)\r\n\r\n\r\n    return (<div>\r\n            <div className=\"types_block\">\r\n                {TypesElement}\r\n            </div>\r\n\r\n            <div className=\"types_block_find\">\r\n                {activeBtn && <button className={\"btn_find_type\"} onClick={() => {\r\n                    onShowAllPokemon()\r\n                }}>ALL TYPES\r\n                </button>}\r\n\r\n\r\n                <button className=\"btn_find_type\" disabled={activeFilter.length === 0} onClick={() => {\r\n                    onShowPokemon()\r\n                }}>FIND\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Filter from \"./Filter\";\r\nimport {\r\n    actions, getPokemonData,\r\n    getPokemonWithTypes,\r\n    getTypes,\r\n    requestPokemon,\r\n} from \"../../../Redux/pokedexReducer\";\r\nimport {pokemonListType} from \"../../../Types/Type\";\r\nimport {AppStateType} from \"../../../Redux/store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n\r\n    activeFilter: Array<{ type: string }>\r\n    pokemonList: Array<pokemonListType>\r\n    typesData: Array<{ name: string }>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTypes: () => void\r\n    getPokemonWithTypes: (type: string) => any\r\n    requestPokemon: (count: number, cardQuantity: number | any) => any\r\n    setActiveFilter: (name: string) => void\r\n    delActiveFilter: (name: string) => void\r\n    resetPokemonInfo: () => any\r\n    getPokemonData: (name: string) => void\r\n}\r\n\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype StateType = {\r\n    activeBtn:boolean\r\n}\r\n\r\n\r\nclass FilterListContainer extends React.Component<PropsType, StateType> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n           activeBtn:false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTypes()\r\n    }\r\n\r\n\r\n     onShowPokemon = async () =>  {\r\n         this.props.resetPokemonInfo()\r\n\r\n         for(const element of this.props.activeFilter ){\r\n\r\n             await this.props.getPokemonWithTypes(element.type);\r\n             console.log(\"here 2\")\r\n             for(const el of this.props.pokemonList ){\r\n                 await this.props.getPokemonData(el.pokemon.name)\r\n             }\r\n         }\r\n         this.isActiveBtn()\r\n    }\r\n\r\n    isActiveBtn = () => {\r\n        this.setState({\r\n          activeBtn: !this.state.activeBtn\r\n        });\r\n    }\r\n\r\n\r\n     onShowAllPokemon = async () => {\r\n\r\n         this.props.resetPokemonInfo()\r\n             await this.props.requestPokemon(0, 20);\r\n\r\n             for(const el of this.props.pokemonList ){\r\n                 await this.props.getPokemonData(el.name)\r\n             }\r\n         this.isActiveBtn()\r\n\r\n    }\r\n\r\n    setCheckType = (name: string) => {\r\n\r\n        this.props.setActiveFilter(name)\r\n    }\r\n    delCheckType = (name: string) => {\r\n\r\n        this.props.delActiveFilter(name)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Filter {...this.props}  activeBtn={this.state.activeBtn}  onShowAllPokemon={this.onShowAllPokemon} onShowPokemon={this.onShowPokemon}\r\n                       setCheckType={this.setCheckType} delCheckType={this.delCheckType}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        typesData: state.pokedex.typesData,\r\n        pokemonList: state.pokedex.pokemonListData,\r\n        activeFilter: state.pokedex.activeFilter,\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    getTypes,\r\n    getPokemonWithTypes,\r\n    requestPokemon,\r\n    getPokemonData,\r\n    setActiveFilter: actions.setActiveFilter,\r\n    delActiveFilter: actions.delActiveFilter,\r\n    resetPokemonInfo: actions.resetPokemonInfo\r\n\r\n})(FilterListContainer);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PokemonCard from \"./PokemonCard/PokemonCard\";\r\nimport \"./PokemonList.css\"\r\nimport PaginatorContainer from \"./Paginator/PaginatorContainer\";\r\nimport PokemonSearchFormContainer from \"./PokemonSearchForm/PokemonSearchFormContainer\";\r\nimport FilterContainer from \"./Filter/FilterContainer\";\r\nimport { pokemonType } from '../../Types/Type';\r\n\r\n\r\ntype PropsType = {\r\n    pokemonInfo: Array<pokemonType>\r\n    searchHistory: Array<pokemonType>\r\n    isShowPaginator: boolean\r\n    onDeleteFindPokemon: ()=> void\r\n}\r\n\r\nlet PokemonList: React.FC<PropsType> = ({pokemonInfo,isShowPaginator, searchHistory,  onDeleteFindPokemon})=> {\r\n\r\n    pokemonInfo.sort(function (a, b) {\r\n        return a.id - b.id\r\n    })\r\n\r\n    let onMapping = (mapName: Array<pokemonType>) => {\r\n        return mapName.map(p => <PokemonCard key={p.id} id={p.id} hp={p.stats[0].base_stat}\r\n                                             height={p.height} weight={p.weight}\r\n                                             type={p.types[0].type.name}\r\n                                             name={p.name}\r\n                                             photo={p.sprites.other.dream_world.front_default == null ? p.sprites.front_default : p.sprites.other.dream_world.front_default}\r\n                                             attack={p.stats[1].base_stat} defense={p.stats[2].base_stat}\r\n                                             specialAttack={p.stats[3].base_stat}\r\n                                             specialDefense={p.stats[4].base_stat}\r\n                                             speed={p.stats[5].base_stat}/>)\r\n }\r\n\r\n\r\n\r\n    return (<div>\r\n            <PokemonSearchFormContainer />\r\n            <FilterContainer />\r\n            {searchHistory.length > 0 && <div className=\"found_border\">\r\n                <h1>Found Pokemon:</h1>\r\n                <div className=\"container\">\r\n                    {onMapping(searchHistory)}\r\n                </div>\r\n                <button className={\"btn_close_searchHistory\"} onClick={() => {\r\n                    onDeleteFindPokemon()\r\n                }}> close\r\n                </button>\r\n            </div>}\r\n\r\n            <div className=\"container\">\r\n                {onMapping(pokemonInfo)}\r\n            </div>\r\n            {isShowPaginator && <PaginatorContainer/>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default PokemonList;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport PokemonList from \"./PokemonList\";\r\nimport {\r\n    actions,\r\n    getPokemonData,\r\n    requestPokemon,\r\n} from \"../../Redux/pokedexReducer\";\r\nimport {AppStateType} from \"../../Redux/store\";\r\nimport {pokemonListType, pokemonType} from \"../../Types/Type\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    pokemonInfo: Array<pokemonType>\r\n    searchHistory: Array<pokemonType>\r\n    pokemonList: Array<pokemonListType>\r\n    isShowPaginator: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    requestPokemon: (count: number, cardQuantity: number | any) => any\r\n    getPokemonData: (name: string) => void\r\n    deleteFindPokemon: () => void\r\n    errorSearch: (error: boolean) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass PokemonListContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.requestPokemon(0, 20).then(() => {\r\n            this.props.pokemonList.forEach(element => this.props.getPokemonData(element.name))\r\n        })\r\n\r\n    }\r\n\r\n    onDeleteFindPokemon = () => {\r\n        this.props.deleteFindPokemon()\r\n        this.props.errorSearch(false)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <PokemonList {...this.props} onDeleteFindPokemon={this.onDeleteFindPokemon}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        pokemonInfo: state.pokedex.pokemon,\r\n        pokemonList: state.pokedex.pokemonListData,\r\n        searchHistory: state.pokedex.searchHistory,\r\n        isShowPaginator: state.pokedex.isShowPaginator\r\n    }\r\n\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    requestPokemon,\r\n    getPokemonData,\r\n    deleteFindPokemon: actions.deleteFindPokemon,\r\n    errorSearch: actions.errorSearch,\r\n})(PokemonListContainer);\r\n\r\n","import './App.css';\r\nimport PokemonListContainer from \"./Components/PokemonList/PokemonListContainer\";\r\nimport {useEffect} from \"react\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.title = \"pokedex\"\r\n  }, []);\r\n  return (\r\n  <div >\r\n\r\n    <PokemonListContainer />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import pokedexReducer from \"./pokedexReducer\";\r\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nlet rootReducer = combineReducers({\r\n    pokedex: pokedexReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer //(globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\n\r\ntype PropertiesTypes<T> = T extends {[key:string]: infer U} ? U : never\r\n\r\nexport type InferActionsType<T extends {[key:string]: (...args: any[])=> any}>= ReturnType<PropertiesTypes<T>>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}